# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget clangBasic clangLex clangParse clangAST clangDynamicASTMatchers clangASTMatchers clangSema clangCodeGen clangAnalysis clangEdit clangRewrite clangARCMigrate clangDriver clangSerialization clangRewriteFrontend clangFrontend clangFrontendTool clangToolingCore clangTooling clangIndex clangStaticAnalyzerCore clangStaticAnalyzerCheckers clangStaticAnalyzerFrontend clangFormat clang clang-format clang-import-test clangApplyReplacements clangRename clangReorderFields clangTidy clangTidyPlugin clangTidyBoostModule clangTidyCERTModule clangTidyLLVMModule clangTidyCppCoreGuidelinesModule clangTidyGoogleModule clangTidyMiscModule clangTidyModernizeModule clangTidyMPIModule clangTidyPerformanceModule clangTidyReadabilityModule clangTidyUtils clangChangeNamespace clangQuery clangMove clangIncludeFixer clangIncludeFixerPlugin findAllSymbols libclang)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target clangBasic
add_library(clangBasic SHARED IMPORTED)

# Create imported target clangLex
add_library(clangLex SHARED IMPORTED)

# Create imported target clangParse
add_library(clangParse SHARED IMPORTED)

# Create imported target clangAST
add_library(clangAST SHARED IMPORTED)

# Create imported target clangDynamicASTMatchers
add_library(clangDynamicASTMatchers SHARED IMPORTED)

# Create imported target clangASTMatchers
add_library(clangASTMatchers SHARED IMPORTED)

# Create imported target clangSema
add_library(clangSema SHARED IMPORTED)

# Create imported target clangCodeGen
add_library(clangCodeGen SHARED IMPORTED)

# Create imported target clangAnalysis
add_library(clangAnalysis SHARED IMPORTED)

# Create imported target clangEdit
add_library(clangEdit SHARED IMPORTED)

# Create imported target clangRewrite
add_library(clangRewrite SHARED IMPORTED)

# Create imported target clangARCMigrate
add_library(clangARCMigrate SHARED IMPORTED)

# Create imported target clangDriver
add_library(clangDriver SHARED IMPORTED)

# Create imported target clangSerialization
add_library(clangSerialization SHARED IMPORTED)

# Create imported target clangRewriteFrontend
add_library(clangRewriteFrontend SHARED IMPORTED)

# Create imported target clangFrontend
add_library(clangFrontend SHARED IMPORTED)

# Create imported target clangFrontendTool
add_library(clangFrontendTool SHARED IMPORTED)

# Create imported target clangToolingCore
add_library(clangToolingCore SHARED IMPORTED)

# Create imported target clangTooling
add_library(clangTooling SHARED IMPORTED)

# Create imported target clangIndex
add_library(clangIndex SHARED IMPORTED)

# Create imported target clangStaticAnalyzerCore
add_library(clangStaticAnalyzerCore SHARED IMPORTED)

# Create imported target clangStaticAnalyzerCheckers
add_library(clangStaticAnalyzerCheckers SHARED IMPORTED)

# Create imported target clangStaticAnalyzerFrontend
add_library(clangStaticAnalyzerFrontend SHARED IMPORTED)

# Create imported target clangFormat
add_library(clangFormat SHARED IMPORTED)

# Create imported target clang
add_executable(clang IMPORTED)
set_property(TARGET clang PROPERTY ENABLE_EXPORTS 1)

set_target_properties(clang PROPERTIES
  INTERFACE_LINK_LIBRARIES "LLVMAArch64CodeGen;LLVMAArch64AsmPrinter;LLVMAArch64AsmParser;LLVMAArch64Desc;LLVMAArch64Info;LLVMAArch64Disassembler;LLVMAMDGPUCodeGen;LLVMAMDGPUAsmPrinter;LLVMAMDGPUAsmParser;LLVMAMDGPUDesc;LLVMAMDGPUInfo;LLVMAMDGPUDisassembler;LLVMARMCodeGen;LLVMARMAsmPrinter;LLVMARMAsmParser;LLVMARMDesc;LLVMARMInfo;LLVMARMDisassembler;LLVMBPFCodeGen;LLVMBPFAsmPrinter;LLVMBPFDesc;LLVMBPFInfo;LLVMBPFDisassembler;LLVMHexagonCodeGen;LLVMHexagonAsmParser;LLVMHexagonDesc;LLVMHexagonInfo;LLVMHexagonDisassembler;LLVMLanaiCodeGen;LLVMLanaiAsmParser;LLVMLanaiDesc;LLVMLanaiInfo;LLVMLanaiDisassembler;LLVMMipsCodeGen;LLVMMipsAsmPrinter;LLVMMipsAsmParser;LLVMMipsDesc;LLVMMipsInfo;LLVMMipsDisassembler;LLVMMSP430CodeGen;LLVMMSP430AsmPrinter;LLVMMSP430Desc;LLVMMSP430Info;LLVMNVPTXCodeGen;LLVMNVPTXAsmPrinter;LLVMNVPTXDesc;LLVMNVPTXInfo;LLVMPowerPCCodeGen;LLVMPowerPCAsmPrinter;LLVMPowerPCAsmParser;LLVMPowerPCDesc;LLVMPowerPCInfo;LLVMPowerPCDisassembler;LLVMRISCVCodeGen;LLVMRISCVDesc;LLVMRISCVInfo;LLVMSparcCodeGen;LLVMSparcAsmPrinter;LLVMSparcAsmParser;LLVMSparcDesc;LLVMSparcInfo;LLVMSparcDisassembler;LLVMSystemZCodeGen;LLVMSystemZAsmPrinter;LLVMSystemZAsmParser;LLVMSystemZDesc;LLVMSystemZInfo;LLVMSystemZDisassembler;LLVMX86CodeGen;LLVMX86AsmPrinter;LLVMX86AsmParser;LLVMX86Desc;LLVMX86Info;LLVMX86Disassembler;LLVMXCoreCodeGen;LLVMXCoreAsmPrinter;LLVMXCoreDesc;LLVMXCoreInfo;LLVMXCoreDisassembler;LLVMAnalysis;LLVMCodeGen;LLVMCore;LLVMipo;LLVMInstCombine;LLVMInstrumentation;LLVMMC;LLVMMCParser;LLVMObjCARCOpts;LLVMOption;LLVMScalarOpts;LLVMSupport;LLVMTransformUtils;LLVMVectorize;clangBasic;clangCodeGen;clangDriver;clangFrontend;clangFrontendTool;-Wl,-sectcreate,__TEXT,__info_plist,/tmp/llvm-20170530-91609-z66n2f/tools/clang/tools/driver/Info.plist;Polly"
)

# Create imported target clang-format
add_executable(clang-format IMPORTED)

# Create imported target clang-import-test
add_executable(clang-import-test IMPORTED)

# Create imported target clangApplyReplacements
add_library(clangApplyReplacements SHARED IMPORTED)

# Create imported target clangRename
add_library(clangRename SHARED IMPORTED)

# Create imported target clangReorderFields
add_library(clangReorderFields SHARED IMPORTED)

# Create imported target clangTidy
add_library(clangTidy SHARED IMPORTED)

# Create imported target clangTidyPlugin
add_library(clangTidyPlugin SHARED IMPORTED)

# Create imported target clangTidyBoostModule
add_library(clangTidyBoostModule SHARED IMPORTED)

# Create imported target clangTidyCERTModule
add_library(clangTidyCERTModule SHARED IMPORTED)

# Create imported target clangTidyLLVMModule
add_library(clangTidyLLVMModule SHARED IMPORTED)

# Create imported target clangTidyCppCoreGuidelinesModule
add_library(clangTidyCppCoreGuidelinesModule SHARED IMPORTED)

# Create imported target clangTidyGoogleModule
add_library(clangTidyGoogleModule SHARED IMPORTED)

# Create imported target clangTidyMiscModule
add_library(clangTidyMiscModule SHARED IMPORTED)

# Create imported target clangTidyModernizeModule
add_library(clangTidyModernizeModule SHARED IMPORTED)

# Create imported target clangTidyMPIModule
add_library(clangTidyMPIModule SHARED IMPORTED)

# Create imported target clangTidyPerformanceModule
add_library(clangTidyPerformanceModule SHARED IMPORTED)

# Create imported target clangTidyReadabilityModule
add_library(clangTidyReadabilityModule SHARED IMPORTED)

# Create imported target clangTidyUtils
add_library(clangTidyUtils SHARED IMPORTED)

# Create imported target clangChangeNamespace
add_library(clangChangeNamespace SHARED IMPORTED)

# Create imported target clangQuery
add_library(clangQuery SHARED IMPORTED)

# Create imported target clangMove
add_library(clangMove SHARED IMPORTED)

# Create imported target clangIncludeFixer
add_library(clangIncludeFixer SHARED IMPORTED)

# Create imported target clangIncludeFixerPlugin
add_library(clangIncludeFixerPlugin SHARED IMPORTED)

# Create imported target findAllSymbols
add_library(findAllSymbols SHARED IMPORTED)

# Create imported target libclang
add_library(libclang SHARED IMPORTED)

if(CMAKE_VERSION VERSION_LESS 2.8.12)
  message(FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/ClangTargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# Make sure the targets which have been exported in some other 
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "LLVMAArch64CodeGen" "LLVMAArch64AsmPrinter" "LLVMAArch64AsmParser" "LLVMAArch64Desc" "LLVMAArch64Info" "LLVMAArch64Disassembler" "LLVMAMDGPUCodeGen" "LLVMAMDGPUAsmPrinter" "LLVMAMDGPUAsmParser" "LLVMAMDGPUDesc" "LLVMAMDGPUInfo" "LLVMAMDGPUDisassembler" "LLVMARMCodeGen" "LLVMARMAsmPrinter" "LLVMARMAsmParser" "LLVMARMDesc" "LLVMARMInfo" "LLVMARMDisassembler" "LLVMBPFCodeGen" "LLVMBPFAsmPrinter" "LLVMBPFDesc" "LLVMBPFInfo" "LLVMBPFDisassembler" "LLVMHexagonCodeGen" "LLVMHexagonAsmParser" "LLVMHexagonDesc" "LLVMHexagonInfo" "LLVMHexagonDisassembler" "LLVMLanaiCodeGen" "LLVMLanaiAsmParser" "LLVMLanaiDesc" "LLVMLanaiInfo" "LLVMLanaiDisassembler" "LLVMMipsCodeGen" "LLVMMipsAsmPrinter" "LLVMMipsAsmParser" "LLVMMipsDesc" "LLVMMipsInfo" "LLVMMipsDisassembler" "LLVMMSP430CodeGen" "LLVMMSP430AsmPrinter" "LLVMMSP430Desc" "LLVMMSP430Info" "LLVMNVPTXCodeGen" "LLVMNVPTXAsmPrinter" "LLVMNVPTXDesc" "LLVMNVPTXInfo" "LLVMPowerPCCodeGen" "LLVMPowerPCAsmPrinter" "LLVMPowerPCAsmParser" "LLVMPowerPCDesc" "LLVMPowerPCInfo" "LLVMPowerPCDisassembler" "LLVMRISCVCodeGen" "LLVMRISCVDesc" "LLVMRISCVInfo" "LLVMSparcCodeGen" "LLVMSparcAsmPrinter" "LLVMSparcAsmParser" "LLVMSparcDesc" "LLVMSparcInfo" "LLVMSparcDisassembler" "LLVMSystemZCodeGen" "LLVMSystemZAsmPrinter" "LLVMSystemZAsmParser" "LLVMSystemZDesc" "LLVMSystemZInfo" "LLVMSystemZDisassembler" "LLVMX86CodeGen" "LLVMX86AsmPrinter" "LLVMX86AsmParser" "LLVMX86Desc" "LLVMX86Info" "LLVMX86Disassembler" "LLVMXCoreCodeGen" "LLVMXCoreAsmPrinter" "LLVMXCoreDesc" "LLVMXCoreInfo" "LLVMXCoreDisassembler" "LLVMAnalysis" "LLVMCodeGen" "LLVMCore" "LLVMipo" "LLVMInstCombine" "LLVMInstrumentation" "LLVMMC" "LLVMMCParser" "LLVMObjCARCOpts" "LLVMOption" "LLVMScalarOpts" "LLVMSupport" "LLVMTransformUtils" "LLVMVectorize" "Polly" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
